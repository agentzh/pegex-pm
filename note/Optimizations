Optimization List
=================

When a grammar is compiled, it gets turned into a tree of information defining
the grammar. This consists of rules, regexes, groupings, quantifiers and other
such things.

== Possible Optimizations

- re-concat :: Concatenate resolved parts of regexes
- re-combine :: Resolve refs to sub-regexps
- re-reduce :: Combine non-special, adjacent rgx objects
- resolve :: Turn grammar psuedonyms into real class names to use
- extend :: Pull in rules from another grammar unless defined locally
- include :: Pull in rules from another grammar (need to figure out when)
- max-min :: Set all max, min and asr values explicitly
- prune :: Remove non-referenced rules
- finalize :: Apply all needed optimizations before using a grammar
- compile :: Compile the text of an action rule into native code and link in
- bind-parser :: Look up parser methods and link them into the grammar
- bind-receiver :: Look up receiver methods and link them into the grammar
- bind-trace :: Wrap parser methods with trace logic

== Ideas

- Sub grammars

  * Start a new grammar with a `%grammar` statement
