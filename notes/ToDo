#------------------------------------------
- Die at furthest point parsed

- Refactor compression testing
  - compression equivalence is not a goal
  - s/\n/;/g *is* a goal

#------------------------------------------
+ Find modules that dep on Pegex
+ Remove %%% support
  a* %%% b* == b* a* %% b* == ( a | b )*
+ Make ~ mean /~/
+ Make <> brackets optional outside a regex
+ Swap [] for ()
+ Remove whitespace from inside regexps (emulate 'x' flag)
+ / (: xxx ) / means / (?: xxx ) /
+ / (= xxx ) / means / (?= xxx ) /

+ Allow comments in regexes
+ Test comments after rules...

#------------------------------------------
== Fix xt failure:
+ bootstrap compile barfs on yaml.pgx

#------------------------------------------
+ Implement %%%

#------------------------------------------
+ Switch to Mo
+ Support .<rule>
  + Compare to Rx:G
+ Skip empty regex matches

#------------------------------------------

+ Stabilize TestML with Bootstrap Grammar
+ Split Grammar into Parser
  + Look for all instances of build_tree (tree_)
+ Make Pegex and TestML work
+ Split parse into smaller methods

+ Pegex::AST - Receiver to generate an AST
  + Write AST tests
  + Write Pegex::AST module
  + Migrate parser to new AST model
  + Test/Compare to Rx:G 

+ Pegex::Regex - =~ sugar from Rx::G
  + $string =~ qr{pegex grammar string}
  + $ast = \%/;
  + $ast = \%MATCH

#------------------------------------------

+ Change compile api:
  + compile => parse->combinate->grammar
+ Redo compile api
  all,any,rgx,rul,err
  +,*,?,!,&
    []+*?, !&[|], <>+*?, !=<>
    //, ``
+ Make Pegex self-hosting!!
  + Test against bootstrap compiler against:
    + pegex-pgx
    + testml-pgx

#------------------------------------------

+ Support .<rule>
  + Match but don't save in AST
+ Support <rule> % <rule>
  + And <rule> %% <rule>
- Support <+DEBUG> and <-DEBUG>
+ Smart whitespace
  + name: normal rule
  + name:: smart <ws> rule
  + name:ws1: special user-defined ws rule
- Pegex ->optimize (after combinate)
  - Combine consecutive .rgx
  - .all or .any of 1 elem => .rul
- Add a TIMER option

#------------------------------------------

- Backtracking control
- Detailed error reporting
- Parse Name: First Middle? Last
- Look at Perl6::Rules on CPAN
- Look at Regex::Grammars
- Look at Parse::RecDescent tests
