# 0.21 release
+ Fix 'a b | c' in bootstrap parser
  + Test precedence parsing
+ strip (?-xism:...) wrapper from regexps
+ Make pegex->parse repeatable (currently messes up)
+ Fix inheritance construction in Moos
+ List all docs
+ List all related projects

- Add Pegex::AST (wrap = 1)
  - Use as default in Pegex.pm
- Write Pegex::LoL (wrap = 0)
- Flesh out documentation
- Test with external projects
  - Write xt tests for related projects

- Write tests for various ASTs
- Write tests for skip wrap pass and flat

# New feature ideas
- Compile to arrays only (optionally)
- Move AST primatives to Pegex::AST
  - Pegex::AST subclass of Pegex::Receiver
- Add $_ support
- Add flatten syntax to grammar
- $parser->reset (or ->close)
- Support EXPR precedence parsing grammar
- Support grammar class methods as rules
  - sub rule_indent { ... }
- Make atoms be an actual grammar
  - Subclassable, Includable
- Multiple rule definitions per statement
  - Allow multiline
- Support special <RULE> reference (literal rule name)
- Support single quoted token 'a + b = ...'
  - defines a literal regex with YAML single quote semantics
- Support include and inherit
  - Class/object resolution
- '::' commit syntax
- Combinate adjacent regexes
- Support position moving syntax
  - -- ++ -2 +3 -x +x
- Support subparser using Input object and certain pos
  - Input object should track position
    - This way it can be handed off to another parse
- parse() method can be partial, rather than full
- parse() method can be passed an ending rule. EOS is default.
- grammar object can have code rules
- receiver classes completely control what is result
  - Move default actions from parser to receiver
- Add match stack to the error message
- Add common errors to the Pegex grammar
- Refactor compression testing
  - compression equivalence is not a goal
  - s/\n/;/g *is* a goal
- Pegex ->optimize (after combinate)
  - Combine consecutive .rgx
  - .all or .any of 1 elem => .rul
- Add a TIMER option
- Add benchmarks

# Error Reporting
- Detailed error reporting
- Add `error` msgs to pegex.pgx
- Report grammar class name
- Report the grammar name if present
- Report the current rule stack
- Report info from the Input object
- Report 'End Of Input' message instead of '><'

# Documentation
- Document each module
- doc subdir make docs

# Research
- Look at Perl6::Rules on CPAN
- Look at Regex::Grammars
- Look at Parse::RecDescent tests
- PPI parsing

# Other Parsers to write
- Indentation parser
  - Maybe indentation rules can be grammar methods
- Tracing/Debug Parser
  - Move debug stuff out of Pegex::Parser
  - Count calls
  - NYTProf
- Backtracking parser
  - Parse Name: First Middle? Last

# Other Receivers to write:
- AST receiver (most common base class) Pegex::Receiver::AST
- Streaming receiver (does about nothing) Pegex::Receiver
- TreeDump receiver (instead of wrap)
- Pegex::Receiver::Marpa

# Parser/Compilers to Write
- irssi.log parser
- arithmetic precedence
- Perl 5
- Perl 6
- CoffeeScript
- UniScript
- Kwim
- MarPeg

